    internal class IntegerList
    {
        int[] array;
        int index;

        public IntegerList()
        {
            array = new int[5];
            index = -1;
        }

        public IntegerList(int size)
        {
            array = new int[size];
            index = -1;
        }

        public void Add(int item)
        {
            index+=1;
            if (index < array.GetLength(0))
            {
                array[index] = item;
            }
            else if (!(index < array.GetLength(0)))
            {
                index -= 1;
                increaseSize();
                Add(item);
            }
        }

        public void Insert(int index, int item)
        {
            if (index > -1 && index <= this.index)
            {
                if (this.index > array.GetLength(0))
                {
                    increaseSize();
                }
                for (int i = this.index; i >= index; i-=1)
                {
                    array[i + 1] = array[i];
                }
                array[index] = item;
                this.index += 1;
            }
            else if (!(index > -1 && index <= this.index))
            {
                throw new IndexOutOfRangeException("Index is out of bounds.");
            }
        }


        private void increaseSize()
        {
            int[] newArray = new int[array.GetLength(0) * 2];
            for (int i = 0; i < array.GetLength(0); i+=1 )
            {
                newArray[i] = array[i];
            }
            array = newArray;
        }

        public int[] GetItems()
        {
            int[] items = new int[index + 1];
            for (int i = 0; i < items.GetLength(0); i += 1)
            {
                items[i] = array[i];
            }
            return items;
        }

        public void ConsolePrintItems()
        {
            for (int i = 0; i <= index; i+=1)
            {
                Console.Write(array[i] + "\t");
            }
        }

        public void RemoveAt(int index)
        {
            if (index > -1 && index <= this.index)
            {
                for (int i = index; i < this.index; i+=1)
                {
                    array[i] = array[i + 1];
                }
                this.index -= 1;
            }
            else if (!(index > -1 && index <= this.index))
            {
                throw new IndexOutOfRangeException("Index is out of bounds.");
            }
        }

        public void Sort() 
        {
            for (int i = 1; i <= index; i += 1) 
            {
                int itemInsert = array[i];
                int j;

                for (j = i; j > 0; j -= 1) 
                {
                    if (itemInsert < array[j - 1])
                    {
                        array[j] = array[j - 1];
                    }
                    else break;
                }
                array[j] = itemInsert;
            }
        }

        public int BinarySearch(int item) 
        {
            int lowerBound = 0;
            int upperBound = index;
            int midIndex;

            while (lowerBound <= upperBound) 
            {
                midIndex = (lowerBound + upperBound) / 2;
                
                if (array[midIndex] == item) 
                {
                    return midIndex;
                }

                else if (item < array[midIndex]) 
                {
                    upperBound = midIndex - 1;
                }
                else
                {
                    lowerBound = midIndex + 1;
                }
            }
            return -1;
        }

    }